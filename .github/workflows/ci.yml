name: Test TruffleSqueak

on:
  push:
    branches-ignore:
      - 'experiements/**'
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - gu-catalog.properties
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - gu-catalog.properties
  workflow_dispatch:

env:
  VERBOSE_GRAALVM_LAUNCHERS: true
  MX_GATE_OPTS: '--strict-mode --omit-clean'
  PYTHONIOENCODING: 'utf-8'

jobs:
  style_and_build_config:
    name: style and fullbuild
    timeout-minutes: 15
    runs-on: ubuntu-22.04
    steps:
    - name: Clone TruffleSqueak repository
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12.0'
    - name: Set up dependencies
      run: |
        # Download Eclipse SDK
        eclipse_tar_path="${RUNNER_TEMP}/eclipse.tar.gz"
        wget --no-verbose https://archive.eclipse.org/eclipse/downloads/drops4/R-4.36-202505281830/eclipse-SDK-4.36-linux-gtk-x86_64.tar.gz -O ${eclipse_tar_path}
        tar -xzf ${eclipse_tar_path} -C ${RUNNER_TEMP}
        echo "ECLIPSE_EXE=${RUNNER_TEMP}/eclipse/eclipse" >> "${GITHUB_ENV}" # required by mx
        # Set up mx, oracle/graal, and LabsJDK21
        mx.trufflesqueak/utils.sh "set-up-mx && shallow-clone-graal && set-up-labsjdk 21"
        # Set up style dependencies
        sudo apt update && sudo apt install python3-pip python-setuptools
        jq -r '.pip | to_entries[] | .key+.value' ../graal/common.json | xargs sudo pip install
    - name: Check style and perform full build
      run: mx --java-home="${JAVA_HOME}" --tools-java-home="${JAVA_HOME}" gate ${{ env.MX_GATE_OPTS }} --tags style,fullbuild

  build-coverage:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        java: [25]
    name: coverage ${{ matrix.os }}
    timeout-minutes: 45
    runs-on: ubuntu-22.04
    steps:
    - name: Clone TruffleSqueak repository
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12.0'
    - name: Set up dependencies
      shell: bash
      run: mx.trufflesqueak/utils.sh set-up-dependencies jar latest
    - name: Build GraalVM with TruffleSqueak
      run: mx.trufflesqueak/utils.sh build-graalvm ${{ matrix.java }}
    - name: Run SystemReporter on TruffleSqueak
      run: 'trufflesqueak --code "(String streamContents: [:s | SystemReporter basicNew reportImage: s; reportVM: s; reportVMParameters: s]) withUnixLineEndings" images/test-64bit.image'
    - name: Run gate with code coverage # do not use Graal compiler with JaCoCo code coverage
      run: mx --disable-polyglot gate ${{ env.MX_GATE_OPTS }} --tags build,test --jacocout coverage
    - name: Report code coverage
      env:
        CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
      run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r jacoco.xml
      if: ${{ env.CODACY_PROJECT_TOKEN != '' && job.status == 'success' }}
    - name: Upload Graal compiler dumps
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: graal_dumps-coverage-${{ matrix.os }}
        path: graal_dumps/
        if-no-files-found: ignore
        retention-days: 5

  build-standalone:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-22.04-arm, windows-2022, macos-13, macos-14]
        type: [native, jvm]
    env:
      NATIVE_IMAGE_OPTIONS: "-J-XX:MaxRAMPercentage=95"
      JAVA_VERSION: "25"
      JVMCI_VERSION_CHECK: "ignore" # version of EA build does not always match
      VERBOSE_GRAALVM_LAUNCHERS: true
      PGO_FILE: "${{ github.workspace }}/trufflesqueak-${{ matrix.os }}.iprof"
      PGO_LCOV_FILE: "${{ github.workspace }}/trufflesqueak-${{ matrix.os }}.lcov"
      VM_ARGS: "--vm.ea --vm.Xmx6G --headless --experimental-options --smalltalk.resource-summary=true --compiler.TreatPerformanceWarningsAsErrors=call,instanceof,store,trivial --engine.CompilationFailureAction=Diagnose --engine.CompilationStatistics"
    name: ${{ matrix.type }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Clone TruffleSqueak repository
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Oracle GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '${{ env.JAVA_VERSION }}-ea'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Enable Oracle GraalVM
      shell: bash
      run: echo "BOOTSTRAP_GRAALVM=$JAVA_HOME" >> $GITHUB_ENV
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12.0'
    - name: Set up dependencies
      shell: bash
      run: mx.trufflesqueak/utils.sh set-up-dependencies ${{ matrix.type }} skip
    - name: Cache profile
      id: cache-profile
      uses: actions/cache@v4
      if: ${{ matrix.type == 'native' && runner.os != 'Windows' }}
      with:
        path: ${{ env.PGO_FILE }}
        key: ${{ matrix.os }}-profile
    - name: Build instrumented TruffleSqueak standalone
      if: ${{ matrix.type == 'native' && runner.os != 'Windows' && steps.cache-prime.outputs.cache-hit != 'true' }}
      run: |
        export NATIVE_IMAGE_OPTIONS="${NATIVE_IMAGE_OPTIONS} --pgo-instrument -H:+UnlockExperimentalVMOptions -H:+ProfilingLCOV -H:-UnlockExperimentalVMOptions"
        mx.trufflesqueak/utils.sh build-standalone ${{ matrix.type }}
      timeout-minutes: 30
    - name: Collect profile
      if: ${{ matrix.type == 'native' && runner.os != 'Windows' && steps.cache-prime.outputs.cache-hit != 'true' }}
      run: | # -XX:ProfilesLCOVFile=${{ env.PGO_LCOV_FILE }}
        trufflesqueak --headless --vm.XX:ProfilesDumpFile=${{ env.PGO_FILE }} images/test-64bit.image $(pwd)/src/image-tests/runSqueakPGOWorkload.st
      timeout-minutes: 30
    # - name: Report profiled code coverage
    #   env:
    #     CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
    #   run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ${{ env.PGO_LCOV_FILE }}
    #   if: ${{ matrix.type == 'native' && runner.os != 'Windows' && steps.cache-prime.outputs.cache-hit != 'true' && env.CODACY_PROJECT_TOKEN != '' && job.status == 'success' }}
    - name: Build TruffleSqueak standalone
      run: |
        export NATIVE_IMAGE_OPTIONS="${NATIVE_IMAGE_OPTIONS} --pgo=${{ env.PGO_FILE }}"
        mx.trufflesqueak/utils.sh build-standalone ${{ matrix.type }}
      if: ${{ runner.os != 'Windows' }}
    - name: Build TruffleSqueak standalone via cmd.exe
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
        call mx --env trufflesqueak-${{ matrix.type }} --no-download-progress build
        if ${{ matrix.type }}==native (set "STANDALONE_NAME=TRUFFLESQUEAK_NATIVE_STANDALONE") else (set "STANDALONE_NAME=TRUFFLESQUEAK_JVM_STANDALONE") 
        call mx --env trufflesqueak-${{ matrix.type }} paths --output %STANDALONE_NAME% > standalone-home-with-forward-slashes.txt
        set /p STANDALONE_HOME=<standalone-home-with-forward-slashes.txt
        echo STANDALONE_HOME=%STANDALONE_HOME%>>%GITHUB_ENV%
        echo %STANDALONE_HOME%/bin>>%GITHUB_PATH%
        echo [%STANDALONE_HOME%/bin added to $PATH]
      if: ${{ runner.os == 'Windows' }}
    - name: Run SystemReporter on TruffleSqueak standalone
      shell: bash
      run: |
        trufflesqueak --code "(String streamContents: [:s | SystemReporter basicNew reportImage: s; reportVM: s; reportVMParameters: s]) withUnixLineEndings" images/test-64bit.image
    - name: Archive TruffleSqueak standalone
      shell: bash
      run: mx.trufflesqueak/utils.sh archive-standalone ${{ matrix.type }}
      # GraalVM Native Image does not support AWT on macOS yet (https://github.com/oracle/graal/issues/4921)
      if: ${{ matrix.type == 'jvm' || runner.os != 'macOS' }}
    - name: Deploy TruffleSqueak standalone
      shell: bash
      run: mx.trufflesqueak/utils.sh deploy-asset '${{ env.STANDALONE_ARCHIVE }}' ${{ secrets.GITHUB_TOKEN }}
      if: ${{ matrix.type == 'jvm' || runner.os != 'macOS' }}
    - name: Upload TruffleSqueak standalone
      uses: actions/upload-artifact@v4
      with:
        name: trufflesqueak-${{ matrix.type }}-${{ matrix.os }}
        path: ${{ env.STANDALONE_ARCHIVE }}
        retention-days: 7
      if: ${{ matrix.os == 'ubuntu-22.04-arm' && matrix.type == 'native' }} # for run-benchmarks
    # - name: Run trufflesqueak-polyglot-get on TruffleSqueak JVM standalone
    #   run: |
    #     trufflesqueak-polyglot-get -v 25.0.0 -a js
    #     trufflesqueak --code "Polyglot eval: 'js' string: 'new Object({hello_world: 42})'" images/test-64bit.image
    #   if: ${{ matrix.type == 'jvm' }}
    - name: Run Cuis-Smalltalk tests on TruffleSqueak standalone
      run: |
        mx.trufflesqueak/utils.sh download-cuis-test-image
        trufflesqueak ${{ env.VM_ARGS }} images/Cuis?.?-????.image -s src/image-tests/runCuisTests.st
      timeout-minutes: 10
      if: ${{ matrix.os == 'ubuntu-22.04' }}
    - name: Run Squeak/Smalltalk tests on TruffleSqueak standalone on Windows
      run: |
        trufflesqueak ${{ env.VM_ARGS }} images\test-64bit.image ..\src\image-tests\runSqueakTests.st
      timeout-minutes: 30
      if: ${{ matrix.os == 'windows-2022' && matrix.type != 'native' }} # fails to load packages on native
    - name: Run Squeak/Smalltalk tests on TruffleSqueak standalone
      shell: bash
      run: |
        trufflesqueak ${{ env.VM_ARGS }} images/test-64bit.image $(pwd)/src/image-tests/runSqueakTests.st
      timeout-minutes: 30
      if: ${{ matrix.os != 'windows-2022' && matrix.os != 'macos-13' }} # tests fail on macos-13 and it is reaching EOL soon
    - name: Upload test image on failure
      uses: actions/upload-artifact@v4
      with:
        name: test-image-${{ matrix.type }}-${{ matrix.os }}
        path: images/test-64bit.*
        retention-days: 5
      if: failure()
    - name: Upload Graal compiler dumps
      uses: actions/upload-artifact@v4
      with:
        name: graal_dumps-${{ matrix.type }}-${{ matrix.os }}
        path: graal_dumps/
        if-no-files-found: ignore
        retention-days: 5
      if: always()

  run-benchmarks:
    needs: build-standalone
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04-arm]
        type: [native]
        iterations: [300]
    env:
      VM_ARGS: "--vm.Xmx8G --headless --quiet --experimental-options --smalltalk.resource-summary=true --compiler.TreatPerformanceWarningsAsErrors=call,instanceof,store,trivial --engine.Mode=default --engine.TraceCompilation --engine.CompilationFailureAction=Diagnose --engine.DynamicCompilationThresholds=false --engine.CompilationStatistics"
      EXEC: "/usr/bin/time -v"
    name: run benchmarks
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    steps:
    - name: Clone TruffleSqueak repository
      uses: actions/checkout@v4
    - name: Download TruffleSqueak (${{ matrix.type }}-${{ matrix.os }})
      uses: actions/download-artifact@v4
      with:
        name: trufflesqueak-${{ matrix.type }}-${{ matrix.os }}
    - name: Unpack TruffleSqueak standalone
      run: |
        tar -xzf trufflesqueak-*.tar.gz
        echo $(cd trufflesqueak-*-linux*/bin && pwd) >> $GITHUB_PATH
    - name: Run 'tinyBenchmarks'
      run: |
        ${{ env.EXEC }} trufflesqueak ${{ env.VM_ARGS }} -- --evaluate "1 tinyBenchmarks"
    - name: Run 'Bounce' benchmark
      run: |
        ${{ env.EXEC }} trufflesqueak ${{ env.VM_ARGS }} -- --evaluate "AWFYHarness run: #('Bounce' ${{ matrix.iterations}} 1500)" 2>&1 | tee Bounce.log
    - name: Run 'CD' benchmark
      run: |
        ${{ env.EXEC }} trufflesqueak ${{ env.VM_ARGS }} -- --evaluate "AWFYHarness run: #('CD' ${{ matrix.iterations}} 250)" 2>&1 | tee CD.log
    - name: Run 'DeltaBlue' benchmark
      run: |
        ${{ env.EXEC }} trufflesqueak ${{ env.VM_ARGS }} -- --evaluate "AWFYHarness run: #('DeltaBlue' ${{ matrix.iterations}} 12000)" 2>&1 | tee DeltaBlue.log
    - name: Run 'Havlak' benchmark
      run: |
        ${{ env.EXEC }} trufflesqueak ${{ env.VM_ARGS }} -- --evaluate "AWFYHarness run: #('Havlak' ${{ matrix.iterations}} 1500)" 2>&1 | tee Havlak.log
    - name: Run 'Json' benchmark
      run: |
        ${{ env.EXEC }} trufflesqueak ${{ env.VM_ARGS }} -- --evaluate "AWFYHarness run: #('Json' ${{ matrix.iterations}} 100)" 2>&1 | tee Json.log
    - name: Run 'List' benchmark
      run: |
        ${{ env.EXEC }} trufflesqueak ${{ env.VM_ARGS }} -- --evaluate "AWFYHarness run: #('List' ${{ matrix.iterations}} 1500)" 2>&1 | tee List.log
    - name: Run 'Mandelbrot' benchmark
      run: |
        ${{ env.EXEC }} trufflesqueak ${{ env.VM_ARGS }} -- --evaluate "AWFYHarness run: #('Mandelbrot' ${{ matrix.iterations}} 500)" 2>&1 | tee Mandelbrot.log
    - name: Run 'NBody' benchmark
      run: |
        ${{ env.EXEC }} trufflesqueak ${{ env.VM_ARGS }} -- --evaluate "AWFYHarness run: #('NBody' ${{ matrix.iterations}} 250000)" 2>&1 | tee NBody.log
    - name: Run 'Queens' benchmark
      run: |
        ${{ env.EXEC }} trufflesqueak ${{ env.VM_ARGS }} -- --evaluate "AWFYHarness run: #('Queens' ${{ matrix.iterations}} 1000)" 2>&1 | tee Queens.log
    - name: Run 'Permute' benchmark
      run: |
        ${{ env.EXEC }} trufflesqueak ${{ env.VM_ARGS }} -- --evaluate "AWFYHarness run: #('Permute' ${{ matrix.iterations}} 1000)" 2>&1 | tee Permute.log
    - name: Run 'Richards' benchmark
      run: |
        ${{ env.EXEC }} trufflesqueak ${{ env.VM_ARGS }} -- --evaluate "AWFYHarness run: #('Richards' ${{ matrix.iterations}} 100)" 2>&1 | tee Richards.log
    - name: Run 'Sieve' benchmark
      run: |
        ${{ env.EXEC }} trufflesqueak ${{ env.VM_ARGS }} -- --evaluate "AWFYHarness run: #('Sieve' ${{ matrix.iterations}} 3000)" 2>&1 | tee Sieve.log
    - name: Run 'Storage' benchmark
      run: |
        ${{ env.EXEC }} trufflesqueak ${{ env.VM_ARGS }} -- --evaluate "AWFYHarness run: #('Storage' ${{ matrix.iterations}} 1000)" 2>&1 | tee Storage.log
    - name: Run 'Towers' benchmark
      run: |
        ${{ env.EXEC }} trufflesqueak ${{ env.VM_ARGS }} -- --evaluate "AWFYHarness run: #('Towers' ${{ matrix.iterations}} 1500)" 2>&1 | tee Towers.log
    - name: Analyze benchmark results
      run: |
        jq -n --arg body "$(python mx.trufflesqueak/analyze_benchmarks.py)" '{ body: $body }' |\
        curl -sL -X POST -d @- \
          -H "Content-Type: application/json" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/comments"
    - name: Upload Graal compiler dumps
      uses: actions/upload-artifact@v4
      with:
        name: graal_dumps-benchmarks-${{ matrix.os }}
        path: graal_dumps/
        if-no-files-found: ignore
        retention-days: 5
      if: always()
  
